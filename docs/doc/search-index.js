var N=null,E="",T="t",U="u",searchIndex={};
var R=["Creates a new `Vec2d<T>` and initializes all the values to…","vec2d","usize","result"];

searchIndex["vec2dim"]={"doc":E,"i":[[3,"Vec2d","vec2dim","A two-dimensional array. Unlike a standard vector, `Vec2d`…",N,N],[11,"new_with_default",E,R[0],0,[[[R[2]]],[R[1]]]],[11,"add_row_of_default",E,"Adds a new row to the vector and sets all elements of that…",0,[[["self"]]]],[11,"add_col_of_default",E,"Adds a new column to the array and sets all elements of…",0,[[["self"]]]],[11,"new_with_value",E,R[0],0,[[[R[2]],[T]],[R[1]]]],[11,"from",E,"Creates a new `Vec2d<T>` from an array slice. The slice…",0,[[[R[2]]],[R[1]]]],[11,"contains",E,"Checks if `val` is equivalent to any of the elements in…",0,[[["self"],[T]],["bool"]]],[11,"new",E,"Creates a new `Vec2d<T>` with no rows, columns, or elements.",0,[[],[R[1]]]],[11,"from_fn",E,"Creates a new `Vec2d<T>` and initializes its values from…",0,[[[R[2]],["fn"]],[R[1]]]],[11,"count",E,"Returns the number of elements in the array. Equal to the…",0,[[["self"]],[R[2]]]],[11,"count_cols",E,"Returns the number of columns of the array.",0,[[["self"]],[R[2]]]],[11,"count_rows",E,"Returns the number of rows of the array.",0,[[["self"]],[R[2]]]],[11,"size",E,"Returns the dimensions of the array as a tuple of (row,…",0,[[["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"try_from",E,E,0,[[[U]],[R[3]]]],[11,"try_into",E,E,0,[[],[R[3]]]],[11,"borrow_mut",E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"index",E,E,0,[[["self"],[R[2]]]]],[11,"index_mut",E,E,0,[[["self"],[R[2]]]]]],"p":[[3,"Vec2d"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);